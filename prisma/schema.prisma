generator client {
  provider      = "prisma-client-js"
}

datasource db {
  provider      = "postgresql"
  url           = env("POSTGRES_PRISMA_URL")        // uses connection pooling
  directUrl     = env("POSTGRES_URL_NON_POOLING")   // uses a direct connection
}

model User {
  id            String      @default(cuid()) @id
  name          String?
  email         String      @unique
  password      String
  scope         String?
  storeId       String[]
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")  
  @@map(name: "users")
}

model Maker {
  id            Int         @default(autoincrement()) @id
  name          String?     @unique
  products      Product[]
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")  
  @@map(name: "maker")
}

model Store {
  id            String      @default(cuid()) @id
  name          String      @unique
  state         String?
  zipcode       String?
  address       String?      
  products      Product[]
  sales         Sales[]
  sharing       Int         @default(0)
  rent          Int         @default(0)
  eb            Int         @default(0)
  usen          Int         @default(0)
  outsourcing   Int         @default(0)
  cost          Int         @default(0)
  openAt        DateTime?   @map(name: "open_at")
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  @@map(name: "stores")
}

model Product {
  id            String      @default(cuid()) @id
  name          String      @unique
  basicPrice    Float       @default(0)
  salePrice     Float       @default(0)
  cost          Float       @default(0)
  makerId       Int?
  maker         Maker?      @relation(fields: [makerId], references: [id])
  displayCount  Int?
  store         Store?      @relation(fields: [storeId], references: [id])
  storeId       String?     
  enable        Boolean     @default(true)
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  @@map(name: "products")
}

model CurrentProductCount {
  id            String      @default(cuid()) @id
  storeId       String
  productId     String
  count         Int
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  @@map(name: "current_product_count")
}

model ProductSale {
  id            String      @default(cuid()) @id
  date          DateTime    @db.Date
  storeId       String
  productId     String
  previousCount Int
  remainCount   Int
  restockCount  Int
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  @@map(name: "product_sale")
}

model Sales {
  id            String      @default(cuid()) @id
  date          DateTime    @db.Date
  storeId       String
  store         Store?      @relation(fields: [storeId], references: [id])
  totalSales    Int
  storeCollection   Int
  paypayCollection  Int
  paypayTimeHour    Int
  paypayTimeMin     Int
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  @@map(name: "sales")
}